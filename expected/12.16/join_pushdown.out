\set ECHO none
-- Before running this file User must create database mysql_fdw_regress on
-- mysql with all permission for MYSQL_USER_NAME user with MYSQL_PWD password
-- and ran mysql_init.sh file to create tables.
\c contrib_regression
--Testcase 1:
CREATE EXTENSION IF NOT EXISTS mysql_fdw;
-- FDW-139: Support for JOIN pushdown.
--Testcase 2:
CREATE SERVER mysql_svr FOREIGN DATA WRAPPER mysql_fdw
  OPTIONS (host :MYSQL_HOST, port :MYSQL_PORT);
--Testcase 3:
CREATE USER MAPPING FOR public SERVER mysql_svr
  OPTIONS (username :MYSQL_USER_NAME, password :MYSQL_PASS);
--Testcase 4:
CREATE SERVER mysql_svr1 FOREIGN DATA WRAPPER mysql_fdw
  OPTIONS (host :MYSQL_HOST, port :MYSQL_PORT);
--Testcase 5:
CREATE USER MAPPING FOR public SERVER mysql_svr1
  OPTIONS (username :MYSQL_USER_NAME, password :MYSQL_PASS);
--Testcase 6:
CREATE TYPE user_enum AS ENUM ('foo', 'bar', 'buz');
ERROR:  type "user_enum" already exists
--Testcase 7:
CREATE FOREIGN TABLE fdw139_t1(c1 int, c2 int, c3 text COLLATE "C", c4 text COLLATE "C")
  SERVER mysql_svr OPTIONS(dbname 'mysql_fdw_regress', table_name 'test1');
--Testcase 8:
CREATE FOREIGN TABLE fdw139_t2(c1 int, c2 int, c3 text COLLATE "C", c4 text COLLATE "C")
  SERVER mysql_svr OPTIONS(dbname 'mysql_fdw_regress', table_name 'test2');
--Testcase 9:
CREATE FOREIGN TABLE fdw139_t3(c1 int, c2 int, c3 text COLLATE "C")
  SERVER mysql_svr OPTIONS(dbname 'mysql_fdw_regress', table_name 'test3');
--Testcase 10:
CREATE FOREIGN TABLE fdw139_t4(c1 int, c2 int, c3 text COLLATE "C")
  SERVER mysql_svr1 OPTIONS(dbname 'mysql_fdw_regress', table_name 'test3');
--Testcase 11:
INSERT INTO fdw139_t1 values(1, 100, 'AAA1', 'foo');
--Testcase 12:
INSERT INTO fdw139_t1 values(2, 100, 'AAA2', 'bar');
--Testcase 13:
INSERT INTO fdw139_t1 values(11, 100, 'AAA11', 'foo');
--Testcase 14:
INSERT INTO fdw139_t2 values(1, 200, 'BBB1', 'foo');
--Testcase 15:
INSERT INTO fdw139_t2 values(2, 200, 'BBB2', 'bar');
--Testcase 16:
INSERT INTO fdw139_t2 values(12, 200, 'BBB12', 'foo');
--Testcase 17:
INSERT INTO fdw139_t3 values(1, 300, 'CCC1');
--Testcase 18:
INSERT INTO fdw139_t3 values(2, 300, 'CCC2');
--Testcase 19:
INSERT INTO fdw139_t3 values(13, 300, 'CCC13');
--Testcase 20:
SET enable_mergejoin TO off;
--Testcase 21:
SET enable_hashjoin TO off;
--Testcase 22:
SET enable_sort TO off;
--Testcase 23:
ALTER FOREIGN TABLE fdw139_t1 ALTER COLUMN c4 type user_enum;
--Testcase 24:
ALTER FOREIGN TABLE fdw139_t2 ALTER COLUMN c4 type user_enum;
-- Join two tables
-- target list order is different for v10 and v96.
--Testcase 25:
EXPLAIN (COSTS false, VERBOSE)
SELECT t1.c1, t2.c1
  FROM fdw139_t1 t1 JOIN fdw139_t2 t2 ON (t1.c1 = t2.c1)
  ORDER BY t1.c3, t1.c1;
                                                                                                               QUERY PLAN                                                                                                                
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: t1.c1, t2.c1, t1.c3
   Relations: (mysql_fdw_regress.fdw139_t1 t1) INNER JOIN (mysql_fdw_regress.fdw139_t2 t2)
   Remote query: SELECT r1.`c1`, r2.`c1`, r1.`c3` FROM (`mysql_fdw_regress`.`test1` r1 INNER JOIN `mysql_fdw_regress`.`test2` r2 ON (((r1.`c1` = r2.`c1`)))) ORDER BY r1.`c3` IS NULL ASC, r1.`c3` ASC, r1.`c1` IS NULL ASC, r1.`c1` ASC
(4 rows)

--Testcase 26:
SELECT t1.c1, t2.c1
  FROM fdw139_t1 t1 JOIN fdw139_t2 t2 ON (t1.c1 = t2.c1)
  ORDER BY t1.c3, t1.c1;
 c1 | c1 
----+----
  1 |  1
  2 |  2
(2 rows)

-- INNER JOIN with where condition.  Should execute where condition separately
-- on remote side.
-- target list order is different for v10 and v96.
--Testcase 27:
EXPLAIN (COSTS false, VERBOSE)
SELECT t1.c1, t2.c1
  FROM fdw139_t1 t1 JOIN fdw139_t2 t2 ON (t1.c1 = t2.c1) WHERE t1.c2 = 100
  ORDER BY t1.c3, t1.c1;
                                                                                                                          QUERY PLAN                                                                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: t1.c1, t2.c1, t1.c3
   Relations: (mysql_fdw_regress.fdw139_t1 t1) INNER JOIN (mysql_fdw_regress.fdw139_t2 t2)
   Remote query: SELECT r1.`c1`, r2.`c1`, r1.`c3` FROM (`mysql_fdw_regress`.`test1` r1 INNER JOIN `mysql_fdw_regress`.`test2` r2 ON (((r1.`c1` = r2.`c1`)) AND ((r1.`c2` = 100)))) ORDER BY r1.`c3` IS NULL ASC, r1.`c3` ASC, r1.`c1` IS NULL ASC, r1.`c1` ASC
(4 rows)

--Testcase 28:
SELECT t1.c1, t2.c1
  FROM fdw139_t1 t1 JOIN fdw139_t2 t2 ON (t1.c1 = t2.c1) WHERE t1.c2 = 100
  ORDER BY t1.c3, t1.c1;
 c1 | c1 
----+----
  1 |  1
  2 |  2
(2 rows)

-- INNER JOIN in which join clause is not pushable.
-- target list order is different for v10 and v96.
--Testcase 29:
EXPLAIN (COSTS false, VERBOSE)
SELECT t1.c1, t2.c1
  FROM fdw139_t1 t1 JOIN fdw139_t2 t2 ON (abs(t1.c1) = t2.c1) WHERE t1.c2 = 100
  ORDER BY t1.c3, t1.c1;
                                                                                                                             QUERY PLAN                                                                                                                             
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: t1.c1, t2.c1, t1.c3
   Relations: (mysql_fdw_regress.fdw139_t1 t1) INNER JOIN (mysql_fdw_regress.fdw139_t2 t2)
   Remote query: SELECT r1.`c1`, r2.`c1`, r1.`c3` FROM (`mysql_fdw_regress`.`test1` r1 INNER JOIN `mysql_fdw_regress`.`test2` r2 ON (((abs(r1.`c1`) = r2.`c1`)) AND ((r1.`c2` = 100)))) ORDER BY r1.`c3` IS NULL ASC, r1.`c3` ASC, r1.`c1` IS NULL ASC, r1.`c1` ASC
(4 rows)

--Testcase 30:
SELECT t1.c1, t2.c1
  FROM fdw139_t1 t1 JOIN fdw139_t2 t2 ON (abs(t1.c1) = t2.c1) WHERE t1.c2 = 100
  ORDER BY t1.c3, t1.c1;
 c1 | c1 
----+----
  1 |  1
  2 |  2
(2 rows)

-- Join three tables
-- target list order is different for v10 and v96.
--Testcase 31:
EXPLAIN (COSTS false, VERBOSE)
SELECT t1.c1, t2.c2, t3.c3
  FROM fdw139_t1 t1 JOIN fdw139_t2 t2 ON (t1.c1 = t2.c1) JOIN fdw139_t3 t3 ON (t3.c1 = t1.c1)
  ORDER BY t1.c3, t1.c1;
                                                                                                                                                       QUERY PLAN                                                                                                                                                        
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: t1.c1, t2.c2, t3.c3, t1.c3
   Relations: ((mysql_fdw_regress.fdw139_t1 t1) INNER JOIN (mysql_fdw_regress.fdw139_t2 t2)) INNER JOIN (mysql_fdw_regress.fdw139_t3 t3)
   Remote query: SELECT r1.`c1`, r2.`c2`, r4.`c3`, r1.`c3` FROM ((`mysql_fdw_regress`.`test1` r1 INNER JOIN `mysql_fdw_regress`.`test2` r2 ON (((r1.`c1` = r2.`c1`)))) INNER JOIN `mysql_fdw_regress`.`test3` r4 ON (((r1.`c1` = r4.`c1`)))) ORDER BY r1.`c3` IS NULL ASC, r1.`c3` ASC, r1.`c1` IS NULL ASC, r1.`c1` ASC
(4 rows)

--Testcase 32:
SELECT t1.c1, t2.c2, t3.c3
  FROM fdw139_t1 t1 JOIN fdw139_t2 t2 ON (t1.c1 = t2.c1) JOIN fdw139_t3 t3 ON (t3.c1 = t1.c1)
  ORDER BY t1.c3, t1.c1;
 c1 | c2  |  c3  
----+-----+------
  1 | 200 | CCC1
  2 | 200 | CCC2
(2 rows)

EXPLAIN (COSTS false, VERBOSE)
SELECT t1.c1, t2.c1, t3.c1
  FROM fdw139_t1 t1, fdw139_t2 t2, fdw139_t3 t3 WHERE t1.c1 = 11 AND t2.c1 = 12 AND t3.c1 = 13
  ORDER BY t1.c1;
                                                                                                                  QUERY PLAN                                                                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: t1.c1, t2.c1, t3.c1
   Relations: ((mysql_fdw_regress.fdw139_t1 t1) INNER JOIN (mysql_fdw_regress.fdw139_t2 t2)) INNER JOIN (mysql_fdw_regress.fdw139_t3 t3)
   Remote query: SELECT r1.`c1`, r2.`c1`, r3.`c1` FROM ((`mysql_fdw_regress`.`test1` r1 INNER JOIN `mysql_fdw_regress`.`test2` r2 ON (((r2.`c1` = 12)) AND ((r1.`c1` = 11)))) INNER JOIN `mysql_fdw_regress`.`test3` r3 ON (((r3.`c1` = 13))))
(4 rows)

SELECT t1.c1, t2.c1, t3.c1
  FROM fdw139_t1 t1, fdw139_t2 t2, fdw139_t3 t3 WHERE t1.c1 = 11 AND t2.c1 = 12 AND t3.c1 = 13
  ORDER BY t1.c1;
 c1 | c1 | c1 
----+----+----
 11 | 12 | 13
(1 row)

-- LEFT OUTER JOIN
--Testcase 33:
EXPLAIN (COSTS false, VERBOSE)
SELECT t1.c1, t2.c1
  FROM fdw139_t1 t1 LEFT JOIN fdw139_t2 t2 ON (t1.c1 = t2.c1)
  ORDER BY t1.c1, t2.c1 NULLS LAST;
                                                                                                          QUERY PLAN                                                                                                           
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: t1.c1, t2.c1
   Relations: (mysql_fdw_regress.fdw139_t1 t1) LEFT JOIN (mysql_fdw_regress.fdw139_t2 t2)
   Remote query: SELECT r1.`c1`, r2.`c1` FROM (`mysql_fdw_regress`.`test1` r1 LEFT JOIN `mysql_fdw_regress`.`test2` r2 ON (((r1.`c1` = r2.`c1`)))) ORDER BY r1.`c1` IS NULL ASC, r1.`c1` ASC, r2.`c1` IS NULL ASC, r2.`c1` ASC
(4 rows)

--Testcase 34:
SELECT t1.c1, t2.c1
  FROM fdw139_t1 t1 LEFT JOIN fdw139_t2 t2 ON (t1.c1 = t2.c1)
  ORDER BY t1.c1, t2.c1 NULLS LAST;
 c1 | c1 
----+----
  1 |  1
  2 |  2
 11 |   
(3 rows)

-- LEFT JOIN evaluating as INNER JOIN, having unsafe join clause.
--Testcase 35:
EXPLAIN (COSTS false, VERBOSE)
SELECT t1.c1, t2.c1
  FROM fdw139_t1 t1 LEFT JOIN fdw139_t2 t2 ON (abs(t1.c1) = t2.c1)
  WHERE t2.c1 > 1 ORDER BY t1.c1, t2.c1;
                                                                                                                            QUERY PLAN                                                                                                                             
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: t1.c1, t2.c1
   Relations: (mysql_fdw_regress.fdw139_t1 t1) INNER JOIN (mysql_fdw_regress.fdw139_t2 t2)
   Remote query: SELECT r1.`c1`, r2.`c1` FROM (`mysql_fdw_regress`.`test1` r1 INNER JOIN `mysql_fdw_regress`.`test2` r2 ON (((abs(r1.`c1`) = r2.`c1`)) AND ((r2.`c1` > 1)))) ORDER BY r1.`c1` IS NULL ASC, r1.`c1` ASC, abs(r1.`c1`) IS NULL ASC, abs(r1.`c1`) ASC
(4 rows)

--Testcase 36:
SELECT t1.c1, t2.c1
  FROM fdw139_t1 t1 LEFT JOIN fdw139_t2 t2 ON (abs(t1.c1) = t2.c1)
  WHERE t2.c1 > 1 ORDER BY t1.c1, t2.c1;
 c1 | c1 
----+----
  2 |  2
(1 row)

-- LEFT OUTER JOIN in which join clause is not pushable.
--Testcase 37:
EXPLAIN (COSTS false, VERBOSE)
SELECT t1.c1, t2.c1
  FROM fdw139_t1 t1 LEFT JOIN fdw139_t2 t2 ON (abs(t1.c1) = t2.c1)
  ORDER BY t1.c1, t2.c1;
                                                                                                             QUERY PLAN                                                                                                             
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: t1.c1, t2.c1
   Relations: (mysql_fdw_regress.fdw139_t1 t1) LEFT JOIN (mysql_fdw_regress.fdw139_t2 t2)
   Remote query: SELECT r1.`c1`, r2.`c1` FROM (`mysql_fdw_regress`.`test1` r1 LEFT JOIN `mysql_fdw_regress`.`test2` r2 ON (((abs(r1.`c1`) = r2.`c1`)))) ORDER BY r1.`c1` IS NULL ASC, r1.`c1` ASC, r2.`c1` IS NULL ASC, r2.`c1` ASC
(4 rows)

--Testcase 38:
SELECT t1.c1, t2.c1
  FROM fdw139_t1 t1 LEFT JOIN fdw139_t2 t2 ON (abs(t1.c1) = t2.c1)
  ORDER BY t1.c1, t2.c1;
 c1 | c1 
----+----
  1 |  1
  2 |  2
 11 |   
(3 rows)

-- LEFT OUTER JOIN + placement of clauses.
--Testcase 39:
EXPLAIN (COSTS false, VERBOSE)
SELECT t1.c1, t1.c2, t2.c1, t2.c2
  FROM fdw139_t1 t1 LEFT JOIN (SELECT * FROM fdw139_t2 WHERE c1 < 10) t2 ON (t1.c1 = t2.c1)
  WHERE t1.c1 < 10;
                                                                                                   QUERY PLAN                                                                                                    
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: t1.c1, t1.c2, fdw139_t2.c1, fdw139_t2.c2
   Relations: (mysql_fdw_regress.fdw139_t1 t1) LEFT JOIN (mysql_fdw_regress.fdw139_t2)
   Remote query: SELECT r1.`c1`, r1.`c2`, r4.`c1`, r4.`c2` FROM (`mysql_fdw_regress`.`test1` r1 LEFT JOIN `mysql_fdw_regress`.`test2` r4 ON (((r1.`c1` = r4.`c1`)) AND ((r4.`c1` < 10)))) WHERE ((r1.`c1` < 10))
(4 rows)

--Testcase 40:
SELECT t1.c1, t1.c2, t2.c1, t2.c2
  FROM fdw139_t1 t1 LEFT JOIN (SELECT * FROM fdw139_t2 WHERE c1 < 10) t2 ON (t1.c1 = t2.c1)
  WHERE t1.c1 < 10;
 c1 | c2  | c1 | c2  
----+-----+----+-----
  1 | 100 |  1 | 200
  2 | 100 |  2 | 200
(2 rows)

-- Clauses within the nullable side are not pulled up, but the top level clause
-- on nullable side is not pushed down into nullable side
--Testcase 41:
EXPLAIN (COSTS false, VERBOSE)
SELECT t1.c1, t1.c2, t2.c1, t2.c2
  FROM fdw139_t1 t1 LEFT JOIN (SELECT * FROM fdw139_t2 WHERE c1 < 10) t2 ON (t1.c1 = t2.c1)
  WHERE (t2.c1 < 10 OR t2.c1 IS NULL) AND t1.c1 < 10;
                                                                                                                         QUERY PLAN                                                                                                                          
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: t1.c1, t1.c2, fdw139_t2.c1, fdw139_t2.c2
   Relations: (mysql_fdw_regress.fdw139_t1 t1) LEFT JOIN (mysql_fdw_regress.fdw139_t2)
   Remote query: SELECT r1.`c1`, r1.`c2`, r4.`c1`, r4.`c2` FROM (`mysql_fdw_regress`.`test1` r1 LEFT JOIN `mysql_fdw_regress`.`test2` r4 ON (((r1.`c1` = r4.`c1`)) AND ((r4.`c1` < 10)))) WHERE (((r4.`c1` < 10) OR (r4.`c1` IS NULL))) AND ((r1.`c1` < 10))
(4 rows)

--Testcase 42:
SELECT t1.c1, t1.c2, t2.c1, t2.c2
  FROM fdw139_t1 t1 LEFT JOIN (SELECT * FROM fdw139_t2 WHERE c1 < 10) t2 ON (t1.c1 = t2.c1)
  WHERE (t2.c1 < 10 OR t2.c1 IS NULL) AND t1.c1 < 10;
 c1 | c2  | c1 | c2  
----+-----+----+-----
  1 | 100 |  1 | 200
  2 | 100 |  2 | 200
(2 rows)

-- RIGHT OUTER JOIN
-- target list order is different for v10 and v96.
--Testcase 43:
EXPLAIN (COSTS false, VERBOSE)
SELECT t1.c1, t2.c1
  FROM fdw139_t1 t1 RIGHT JOIN fdw139_t2 t2 ON (t1.c1 = t2.c1)
  ORDER BY t2.c1, t1.c1 NULLS LAST;
                                                                                                          QUERY PLAN                                                                                                           
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: t1.c1, t2.c1
   Relations: (mysql_fdw_regress.fdw139_t2 t2) LEFT JOIN (mysql_fdw_regress.fdw139_t1 t1)
   Remote query: SELECT r1.`c1`, r2.`c1` FROM (`mysql_fdw_regress`.`test2` r2 LEFT JOIN `mysql_fdw_regress`.`test1` r1 ON (((r1.`c1` = r2.`c1`)))) ORDER BY r2.`c1` IS NULL ASC, r2.`c1` ASC, r1.`c1` IS NULL ASC, r1.`c1` ASC
(4 rows)

--Testcase 44:
SELECT t1.c1, t2.c1
  FROM fdw139_t1 t1 RIGHT JOIN fdw139_t2 t2 ON (t1.c1 = t2.c1)
  ORDER BY t2.c1, t1.c1 NULLS LAST;
 c1 | c1 
----+----
  1 |  1
  2 |  2
    | 12
(3 rows)

-- Combinations of various joins
-- INNER JOIN + RIGHT JOIN
-- target list order is different for v10 and v96.
--Testcase 45:
EXPLAIN (COSTS false, VERBOSE)
SELECT t1.c1, t2.c2, t3.c3
  FROM fdw139_t1 t1 JOIN fdw139_t2 t2 ON (t1.c1 = t2.c1) RIGHT JOIN fdw139_t3 t3 ON (t1.c1 = t3.c1)
  ORDER BY t1.c1 NULLS LAST, t1.c3, t1.c1;
                                                                                                                                                       QUERY PLAN                                                                                                                                                       
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: t1.c1, t2.c2, t3.c3, t1.c3
   Relations: (mysql_fdw_regress.fdw139_t3 t3) LEFT JOIN ((mysql_fdw_regress.fdw139_t1 t1) INNER JOIN (mysql_fdw_regress.fdw139_t2 t2))
   Remote query: SELECT r1.`c1`, r2.`c2`, r4.`c3`, r1.`c3` FROM (`mysql_fdw_regress`.`test3` r4 LEFT JOIN (`mysql_fdw_regress`.`test1` r1 INNER JOIN `mysql_fdw_regress`.`test2` r2 ON (((r1.`c1` = r2.`c1`)))) ON (((r1.`c1` = r4.`c1`)))) ORDER BY r1.`c1` IS NULL ASC, r1.`c1` ASC, r1.`c3` IS NULL ASC, r1.`c3` ASC
(4 rows)

--Testcase 46:
SELECT t1.c1, t2.c2, t3.c3
  FROM fdw139_t1 t1 JOIN fdw139_t2 t2 ON (t1.c1 = t2.c1) RIGHT JOIN fdw139_t3 t3 ON (t1.c1 = t3.c1)
  ORDER BY t1.c1 NULLS LAST, t1.c3, t1.c1;
 c1 | c2  |  c3   
----+-----+-------
  1 | 200 | CCC1
  2 | 200 | CCC2
    |     | CCC13
(3 rows)

-- FULL OUTER JOIN, should not be pushdown as target database doesn't support
-- it.
--Testcase 47:
EXPLAIN (COSTS false, VERBOSE)
SELECT t1.c1, t2.c1
  FROM fdw139_t1 t1 FULL JOIN fdw139_t1 t2 ON (t1.c1 = t2.c1)
  ORDER BY t1.c1, t2.c1;
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Sort
   Output: t1.c1, t2.c1
   Sort Key: t1.c1, t2.c1
   ->  Hash Full Join
         Output: t1.c1, t2.c1
         Hash Cond: (t1.c1 = t2.c1)
         ->  Foreign Scan on public.fdw139_t1 t1
               Output: t1.c1, t1.c2, t1.c3, t1.c4
               Remote query: SELECT `c1` FROM `mysql_fdw_regress`.`test1`
         ->  Hash
               Output: t2.c1
               ->  Foreign Scan on public.fdw139_t1 t2
                     Output: t2.c1
                     Remote query: SELECT `c1` FROM `mysql_fdw_regress`.`test1`
(14 rows)

--Testcase 48:
SELECT t1.c1, t2.c1
  FROM fdw139_t1 t1 FULL JOIN fdw139_t1 t2 ON (t1.c1 = t2.c1)
  ORDER BY t1.c1, t2.c1;
 c1 | c1 
----+----
  1 |  1
  2 |  2
 11 | 11
(3 rows)

-- Join two tables with FOR UPDATE clause
-- tests whole-row reference for row marks
-- target list order is different for v10 and v96.
--Testcase 49:
EXPLAIN (COSTS false, VERBOSE)
SELECT t1.c1, t2.c1
  FROM fdw139_t1 t1 JOIN fdw139_t2 t2 ON (t1.c1 = t2.c1)
  ORDER BY t1.c3, t1.c1 FOR UPDATE OF t1;
                                                                                                                                              QUERY PLAN                                                                                                                                               
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
   Relations: (mysql_fdw_regress.fdw139_t1 t1) INNER JOIN (mysql_fdw_regress.fdw139_t2 t2)
   Remote query: SELECT r1.`c1`, r2.`c1`, r1.`c3`, r1.`c2`, r1.`c4`, r2.`c2`, r2.`c3`, r2.`c4` FROM (`mysql_fdw_regress`.`test1` r1 INNER JOIN `mysql_fdw_regress`.`test2` r2 ON (((r1.`c1` = r2.`c1`)))) ORDER BY r1.`c3` IS NULL ASC, r1.`c3` ASC, r1.`c1` IS NULL ASC, r1.`c1` ASC FOR UPDATE OF r1
(4 rows)

--Testcase 50:
SELECT t1.c1, t2.c1
  FROM fdw139_t1 t1 JOIN fdw139_t2 t2 ON (t1.c1 = t2.c1)
  ORDER BY t1.c3, t1.c1 FOR UPDATE OF t1;
 c1 | c1 
----+----
  1 |  1
  2 |  2
(2 rows)

-- target list order is different for v10 and v96.
--Testcase 51:
EXPLAIN (COSTS false, VERBOSE)
SELECT t1.c1, t2.c1
  FROM fdw139_t1 t1 JOIN fdw139_t2 t2 ON (t1.c1 = t2.c1)
  ORDER BY t1.c3, t1.c1 FOR UPDATE;
                                                                                                                                                       QUERY PLAN                                                                                                                                                       
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
   Relations: (mysql_fdw_regress.fdw139_t1 t1) INNER JOIN (mysql_fdw_regress.fdw139_t2 t2)
   Remote query: SELECT r1.`c1`, r2.`c1`, r1.`c3`, r1.`c2`, r1.`c4`, r2.`c2`, r2.`c3`, r2.`c4` FROM (`mysql_fdw_regress`.`test1` r1 INNER JOIN `mysql_fdw_regress`.`test2` r2 ON (((r1.`c1` = r2.`c1`)))) ORDER BY r1.`c3` IS NULL ASC, r1.`c3` ASC, r1.`c1` IS NULL ASC, r1.`c1` ASC FOR UPDATE OF r1 FOR UPDATE OF r2
(4 rows)

--Testcase 52:
SELECT t1.c1, t2.c1
  FROM fdw139_t1 t1 JOIN fdw139_t2 t2 ON (t1.c1 = t2.c1)
  ORDER BY t1.c3, t1.c1 FOR UPDATE;
 c1 | c1 
----+----
  1 |  1
  2 |  2
(2 rows)

-- Join two tables with FOR SHARE clause
-- target list order is different for v10 and v96.
--Testcase 53:
EXPLAIN (COSTS false, VERBOSE)
SELECT t1.c1, t2.c1
  FROM fdw139_t1 t1 JOIN fdw139_t2 t2 ON (t1.c1 = t2.c1)
  ORDER BY t1.c3, t1.c1 FOR SHARE OF t1;
                                                                                                                                              QUERY PLAN                                                                                                                                              
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
   Relations: (mysql_fdw_regress.fdw139_t1 t1) INNER JOIN (mysql_fdw_regress.fdw139_t2 t2)
   Remote query: SELECT r1.`c1`, r2.`c1`, r1.`c3`, r1.`c2`, r1.`c4`, r2.`c2`, r2.`c3`, r2.`c4` FROM (`mysql_fdw_regress`.`test1` r1 INNER JOIN `mysql_fdw_regress`.`test2` r2 ON (((r1.`c1` = r2.`c1`)))) ORDER BY r1.`c3` IS NULL ASC, r1.`c3` ASC, r1.`c1` IS NULL ASC, r1.`c1` ASC FOR SHARE OF r1
(4 rows)

--Testcase 54:
SELECT t1.c1, t2.c1
  FROM fdw139_t1 t1 JOIN fdw139_t2 t2 ON (t1.c1 = t2.c1)
  ORDER BY t1.c3, t1.c1 FOR SHARE OF t1;
 c1 | c1 
----+----
  1 |  1
  2 |  2
(2 rows)

-- target list order is different for v10 and v96.
--Testcase 55:
EXPLAIN (COSTS false, VERBOSE)
SELECT t1.c1, t2.c1
  FROM fdw139_t1 t1 JOIN fdw139_t2 t2 ON (t1.c1 = t2.c1)
  ORDER BY t1.c3, t1.c1 FOR SHARE;
                                                                                                                                                      QUERY PLAN                                                                                                                                                      
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
   Relations: (mysql_fdw_regress.fdw139_t1 t1) INNER JOIN (mysql_fdw_regress.fdw139_t2 t2)
   Remote query: SELECT r1.`c1`, r2.`c1`, r1.`c3`, r1.`c2`, r1.`c4`, r2.`c2`, r2.`c3`, r2.`c4` FROM (`mysql_fdw_regress`.`test1` r1 INNER JOIN `mysql_fdw_regress`.`test2` r2 ON (((r1.`c1` = r2.`c1`)))) ORDER BY r1.`c3` IS NULL ASC, r1.`c3` ASC, r1.`c1` IS NULL ASC, r1.`c1` ASC FOR SHARE OF r1 FOR SHARE OF r2
(4 rows)

--Testcase 56:
SELECT t1.c1, t2.c1
  FROM fdw139_t1 t1 JOIN fdw139_t2 t2 ON (t1.c1 = t2.c1)
  ORDER BY t1.c3, t1.c1 FOR SHARE;
 c1 | c1 
----+----
  1 |  1
  2 |  2
(2 rows)

-- Join in CTE.
-- Explain plan difference between v11 (or pre) and later.
--Testcase 57:
EXPLAIN (COSTS false, VERBOSE)
WITH t (c1_1, c1_3, c2_1) AS (
  SELECT t1.c1, t1.c3, t2.c1
    FROM fdw139_t1 t1 JOIN fdw139_t2 t2 ON (t1.c1 = t2.c1)
) SELECT c1_1, c2_1 FROM t ORDER BY c1_3, c1_1;
                                                                                                               QUERY PLAN                                                                                                                
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: t1.c1, t2.c1, t1.c3
   Relations: (mysql_fdw_regress.fdw139_t1 t1) INNER JOIN (mysql_fdw_regress.fdw139_t2 t2)
   Remote query: SELECT r2.`c1`, r3.`c1`, r2.`c3` FROM (`mysql_fdw_regress`.`test1` r2 INNER JOIN `mysql_fdw_regress`.`test2` r3 ON (((r2.`c1` = r3.`c1`)))) ORDER BY r2.`c3` IS NULL ASC, r2.`c3` ASC, r2.`c1` IS NULL ASC, r2.`c1` ASC
(4 rows)

--Testcase 58:
WITH t (c1_1, c1_3, c2_1) AS (
  SELECT t1.c1, t1.c3, t2.c1
    FROM fdw139_t1 t1 JOIN fdw139_t2 t2 ON (t1.c1 = t2.c1)
) SELECT c1_1, c2_1 FROM t ORDER BY c1_3, c1_1;
 c1_1 | c2_1 
------+------
    1 |    1
    2 |    2
(2 rows)

-- Whole-row reference
--Testcase 59:
EXPLAIN (COSTS false, VERBOSE)
SELECT t1, t2, t1.c1
  FROM fdw139_t1 t1 JOIN fdw139_t2 t2 ON (t1.c1 = t2.c1)
  ORDER BY t1.c3, t1.c1;
                                                                                                                                      QUERY PLAN                                                                                                                                      
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: t1.*, t2.*, t1.c1, t1.c3
   Relations: (mysql_fdw_regress.fdw139_t1 t1) INNER JOIN (mysql_fdw_regress.fdw139_t2 t2)
   Remote query: SELECT r1.`c1`, r1.`c2`, r1.`c3`, r1.`c4`, r2.`c1`, r2.`c2`, r2.`c3`, r2.`c4` FROM (`mysql_fdw_regress`.`test1` r1 INNER JOIN `mysql_fdw_regress`.`test2` r2 ON (((r1.`c1` = r2.`c1`)))) ORDER BY r1.`c3` IS NULL ASC, r1.`c3` ASC, r1.`c1` IS NULL ASC, r1.`c1` ASC
(4 rows)

--Testcase 60:
SELECT t1, t2, t1.c1
  FROM fdw139_t1 t1 JOIN fdw139_t2 t2 ON (t1.c1 = t2.c1)
  ORDER BY t1.c3, t1.c1;
        t1        |        t2        | c1 
------------------+------------------+----
 (1,100,AAA1,foo) | (1,200,BBB1,foo) |  1
 (2,100,AAA2,bar) | (2,200,BBB2,bar) |  2
(2 rows)

-- SEMI JOIN, not pushed down
--Testcase 61:
EXPLAIN (COSTS false, VERBOSE)
SELECT t1.c1
  FROM fdw139_t1 t1 WHERE EXISTS (SELECT 1 FROM fdw139_t2 t2 WHERE t1.c1 = t2.c1)
  ORDER BY t1.c1 LIMIT 10;
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Limit
   Output: t1.c1
   ->  Nested Loop Semi Join
         Output: t1.c1
         Join Filter: (t1.c1 = t2.c1)
         ->  Foreign Scan on public.fdw139_t1 t1
               Output: t1.c1, t1.c2, t1.c3, t1.c4
               Remote query: SELECT `c1` FROM `mysql_fdw_regress`.`test1` ORDER BY `c1` IS NULL ASC, `c1` ASC
         ->  Materialize
               Output: t2.c1
               ->  Foreign Scan on public.fdw139_t2 t2
                     Output: t2.c1
                     Remote query: SELECT `c1` FROM `mysql_fdw_regress`.`test2` ORDER BY `c1` IS NULL ASC, `c1` ASC
(13 rows)

--Testcase 62:
SELECT t1.c1
  FROM fdw139_t1 t1 WHERE EXISTS (SELECT 1 FROM fdw139_t2 t2 WHERE t1.c1 = t2.c1)
  ORDER BY t1.c1 LIMIT 10;
 c1 
----
  1
  2
(2 rows)

-- ANTI JOIN, not pushed down
--Testcase 63:
EXPLAIN (COSTS false, VERBOSE)
SELECT t1.c1
  FROM fdw139_t1 t1 WHERE NOT EXISTS (SELECT 1 FROM fdw139_t2 t2 WHERE t1.c1 = t2.c2)
  ORDER BY t1.c1 LIMIT 10;
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Limit
   Output: t1.c1
   ->  Nested Loop Anti Join
         Output: t1.c1
         Join Filter: (t1.c1 = t2.c2)
         ->  Foreign Scan on public.fdw139_t1 t1
               Output: t1.c1, t1.c2, t1.c3, t1.c4
               Remote query: SELECT `c1` FROM `mysql_fdw_regress`.`test1` ORDER BY `c1` IS NULL ASC, `c1` ASC
         ->  Materialize
               Output: t2.c2
               ->  Foreign Scan on public.fdw139_t2 t2
                     Output: t2.c2
                     Remote query: SELECT `c2` FROM `mysql_fdw_regress`.`test2`
(13 rows)

--Testcase 64:
SELECT t1.c1
  FROM fdw139_t1 t1 WHERE NOT EXISTS (SELECT 1 FROM fdw139_t2 t2 WHERE t1.c1 = t2.c2)
  ORDER BY t1.c1 LIMIT 10;
 c1 
----
  1
  2
 11
(3 rows)

-- CROSS JOIN can be pushed down
--Testcase 65:
EXPLAIN (COSTS false, VERBOSE)
SELECT t1.c1, t2.c1
  FROM fdw139_t1 t1 CROSS JOIN fdw139_t2 t2
  ORDER BY t1.c1, t2.c1 LIMIT 10;
                                                                                                       QUERY PLAN                                                                                                       
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: t1.c1, t2.c1
   Relations: (mysql_fdw_regress.fdw139_t1 t1) INNER JOIN (mysql_fdw_regress.fdw139_t2 t2)
   Remote query: SELECT r1.`c1`, r2.`c1` FROM (`mysql_fdw_regress`.`test1` r1 INNER JOIN `mysql_fdw_regress`.`test2` r2 ON (TRUE)) ORDER BY r1.`c1` IS NULL ASC, r1.`c1` ASC, r2.`c1` IS NULL ASC, r2.`c1` ASC LIMIT 10
(4 rows)

--Testcase 66:
SELECT t1.c1, t2.c1
  FROM fdw139_t1 t1 CROSS JOIN fdw139_t2 t2
  ORDER BY t1.c1, t2.c1 LIMIT 10;
 c1 | c1 
----+----
  1 |  1
  1 |  2
  1 | 12
  2 |  1
  2 |  2
  2 | 12
 11 |  1
 11 |  2
 11 | 12
(9 rows)

-- CROSS JOIN combined with local table.
--Testcase 67:
CREATE TABLE local_t1(c1 int);
--Testcase 68:
INSERT INTO local_t1 VALUES (1), (2);
--Testcase 69:
EXPLAIN (COSTS false, VERBOSE)
SELECT t1.c1, t2.c1, l1.c1
  FROM fdw139_t1 t1 CROSS JOIN fdw139_t2 t2 CROSS JOIN local_t1 l1
  ORDER BY t1.c1, t2.c1, l1.c1 LIMIT 10;
                                                                     QUERY PLAN                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1, l1.c1
   ->  Sort
         Output: t1.c1, t2.c1, l1.c1
         Sort Key: t1.c1, t2.c1, l1.c1
         ->  Nested Loop
               Output: t1.c1, t2.c1, l1.c1
               ->  Seq Scan on public.local_t1 l1
                     Output: l1.c1
               ->  Foreign Scan
                     Output: t1.c1, t2.c1
                     Relations: (mysql_fdw_regress.fdw139_t1 t1) INNER JOIN (mysql_fdw_regress.fdw139_t2 t2)
                     Remote query: SELECT r1.`c1`, r2.`c1` FROM (`mysql_fdw_regress`.`test1` r1 INNER JOIN `mysql_fdw_regress`.`test2` r2 ON (TRUE))
(13 rows)

--Testcase 70:
SELECT t1.c1, t2.c1, l1.c1
  FROM fdw139_t1 t1 CROSS JOIN fdw139_t2 t2 CROSS JOIN local_t1 l1
  ORDER BY t1.c1, t2.c1, l1.c1 LIMIT 10;
 c1 | c1 | c1 
----+----+----
  1 |  1 |  1
  1 |  1 |  2
  1 |  2 |  1
  1 |  2 |  2
  1 | 12 |  1
  1 | 12 |  2
  2 |  1 |  1
  2 |  1 |  2
  2 |  2 |  1
  2 |  2 |  2
(10 rows)

--Testcase 71:
SELECT count(t1.c1)
  FROM fdw139_t1 t1 CROSS JOIN fdw139_t2 t2 CROSS JOIN local_t1 l1;
 count 
-------
    18
(1 row)

-- Join two tables from two different foreign table
--Testcase 72:
EXPLAIN (COSTS false, VERBOSE)
SELECT t1.c1, t2.c1
  FROM fdw139_t1 t1 JOIN fdw139_t4 t2 ON (t1.c1 = t2.c1)
  ORDER BY t1.c3, t1.c1;
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop
   Output: t1.c1, t2.c1, t1.c3
   Join Filter: (t1.c1 = t2.c1)
   ->  Foreign Scan on public.fdw139_t1 t1
         Output: t1.c1, t1.c2, t1.c3, t1.c4
         Remote query: SELECT `c1`, `c3` FROM `mysql_fdw_regress`.`test1` ORDER BY `c3` IS NULL ASC, `c3` ASC, `c1` IS NULL ASC, `c1` ASC
   ->  Materialize
         Output: t2.c1
         ->  Foreign Scan on public.fdw139_t4 t2
               Output: t2.c1
               Remote query: SELECT `c1` FROM `mysql_fdw_regress`.`test3`
(11 rows)

--Testcase 73:
SELECT t1.c1, t2.c1
  FROM fdw139_t1 t1 JOIN fdw139_t4 t2 ON (t1.c1 = t2.c1)
  ORDER BY t1.c3, t1.c1;
 c1 | c1 
----+----
  1 |  1
  2 |  2
(2 rows)

-- Unsafe join conditions (c4 has a UDT), not pushed down.
--Testcase 74:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1
  FROM fdw139_t1 t1 LEFT JOIN fdw139_t2 t2 ON (t1.c4 = t2.c4)
  ORDER BY t1.c1, t2.c1;
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Sort
   Output: t1.c1, t2.c1
   Sort Key: t1.c1, t2.c1
   ->  Nested Loop Left Join
         Output: t1.c1, t2.c1
         Join Filter: (t1.c4 = t2.c4)
         ->  Foreign Scan on public.fdw139_t1 t1
               Output: t1.c1, t1.c2, t1.c3, t1.c4
               Remote query: SELECT `c1`, `c4` FROM `mysql_fdw_regress`.`test1`
         ->  Materialize
               Output: t2.c1, t2.c4
               ->  Foreign Scan on public.fdw139_t2 t2
                     Output: t2.c1, t2.c4
                     Remote query: SELECT `c1`, `c4` FROM `mysql_fdw_regress`.`test2`
(14 rows)

--Testcase 75:
SELECT t1.c1, t2.c1
  FROM fdw139_t1 t1 LEFT JOIN fdw139_t2 t2 ON (t1.c4 = t2.c4)
  ORDER BY t1.c1, t2.c1;
 c1 | c1 
----+----
  1 |  1
  1 | 12
  2 |  2
 11 |  1
 11 | 12
(5 rows)

-- Unsafe conditions on one side (c4 has a UDT), not pushed down.
--Testcase 76:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1
  FROM fdw139_t1 t1 LEFT JOIN fdw139_t2 t2 ON (t1.c1 = t2.c1) WHERE t1.c4 = 'foo'
  ORDER BY t1.c1, t2.c1 NULLS LAST;
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Sort
   Output: t1.c1, t2.c1
   Sort Key: t1.c1, t2.c1
   ->  Nested Loop Left Join
         Output: t1.c1, t2.c1
         Join Filter: (t1.c1 = t2.c1)
         ->  Foreign Scan on public.fdw139_t1 t1
               Output: t1.c1, t1.c2, t1.c3, t1.c4
               Filter: (t1.c4 = 'foo'::user_enum)
               Remote query: SELECT `c1`, `c4` FROM `mysql_fdw_regress`.`test1`
         ->  Materialize
               Output: t2.c1
               ->  Foreign Scan on public.fdw139_t2 t2
                     Output: t2.c1
                     Remote query: SELECT `c1` FROM `mysql_fdw_regress`.`test2`
(15 rows)

--Testcase 77:
SELECT t1.c1, t2.c1
  FROM fdw139_t1 t1 LEFT JOIN fdw139_t2 t2 ON (t1.c1 = t2.c1) WHERE t1.c4 = 'foo'
  ORDER BY t1.c1, t2.c1 NULLS LAST;
 c1 | c1 
----+----
  1 |  1
 11 |   
(2 rows)

-- Join where unsafe to pushdown condition in WHERE clause has a column not
-- in the SELECT clause.  In this test unsafe clause needs to have column
-- references from both joining sides so that the clause is not pushed down
-- into one of the joining sides.
-- target list order is different for v10 and v96.
--Testcase 78:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1
  FROM fdw139_t1 t1 JOIN fdw139_t2 t2 ON (t1.c1 = t2.c1) WHERE t1.c4 = t2.c4
  ORDER BY t1.c3, t1.c1;
                                                                                                                        QUERY PLAN                                                                                                                         
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: t1.c1, t2.c1, t1.c3
   Filter: (t1.c4 = t2.c4)
   Relations: (mysql_fdw_regress.fdw139_t1 t1) INNER JOIN (mysql_fdw_regress.fdw139_t2 t2)
   Remote query: SELECT r1.`c1`, r2.`c1`, r1.`c3`, r1.`c4`, r2.`c4` FROM (`mysql_fdw_regress`.`test1` r1 INNER JOIN `mysql_fdw_regress`.`test2` r2 ON (((r1.`c1` = r2.`c1`)))) ORDER BY r1.`c3` IS NULL ASC, r1.`c3` ASC, r1.`c1` IS NULL ASC, r1.`c1` ASC
(5 rows)

--Testcase 79:
SELECT t1.c1, t2.c1
  FROM fdw139_t1 t1 JOIN fdw139_t2 t2 ON (t1.c1 = t2.c1) WHERE t1.c4 = t2.c4
  ORDER BY t1.c3, t1.c1;
 c1 | c1 
----+----
  1 |  1
  2 |  2
(2 rows)

-- Check join pushdown in situations where multiple userids are involved
--Testcase 80:
CREATE ROLE regress_view_owner SUPERUSER;
--Testcase 81:
CREATE USER MAPPING FOR regress_view_owner
  SERVER mysql_svr OPTIONS (username :MYSQL_USER_NAME, password :MYSQL_PASS);
GRANT SELECT ON fdw139_t1 TO regress_view_owner;
GRANT SELECT ON fdw139_t2 TO regress_view_owner;
--Testcase 82:
CREATE VIEW v1 AS SELECT * FROM fdw139_t1;
--Testcase 83:
CREATE VIEW v2 AS SELECT * FROM fdw139_t2;
--Testcase 84:
ALTER VIEW v2 OWNER TO regress_view_owner;
--Testcase 85:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2
  FROM v1 t1 LEFT JOIN v2 t2 ON (t1.c1 = t2.c1)
  ORDER BY t1.c1, t2.c1, t2.c2 NULLS LAST LIMIT 10;  -- not pushed down, different view owners
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Limit
   Output: fdw139_t1.c1, fdw139_t2.c2, fdw139_t2.c1
   ->  Sort
         Output: fdw139_t1.c1, fdw139_t2.c2, fdw139_t2.c1
         Sort Key: fdw139_t1.c1, fdw139_t2.c1, fdw139_t2.c2
         ->  Nested Loop Left Join
               Output: fdw139_t1.c1, fdw139_t2.c2, fdw139_t2.c1
               Join Filter: (fdw139_t1.c1 = fdw139_t2.c1)
               ->  Foreign Scan on public.fdw139_t1
                     Output: fdw139_t1.c1, fdw139_t1.c2, fdw139_t1.c3, fdw139_t1.c4
                     Remote query: SELECT `c1` FROM `mysql_fdw_regress`.`test1`
               ->  Materialize
                     Output: fdw139_t2.c2, fdw139_t2.c1
                     ->  Foreign Scan on public.fdw139_t2
                           Output: fdw139_t2.c2, fdw139_t2.c1
                           Remote query: SELECT `c1`, `c2` FROM `mysql_fdw_regress`.`test2`
(16 rows)

--Testcase 86:
SELECT t1.c1, t2.c2
  FROM v1 t1 LEFT JOIN v2 t2 ON (t1.c1 = t2.c1)
  ORDER BY t1.c1, t2.c1, t2.c2 NULLS LAST LIMIT 10;
 c1 | c2  
----+-----
  1 | 200
  2 | 200
 11 |    
(3 rows)

--Testcase 87:
ALTER VIEW v1 OWNER TO regress_view_owner;
--Testcase 88:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2
  FROM v1 t1 LEFT JOIN v2 t2 ON (t1.c1 = t2.c1)
  ORDER BY t1.c1, t2.c1, t2.c2 NULLS LAST LIMIT 10;  -- pushed down
                                                                                                                                    QUERY PLAN                                                                                                                                     
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: fdw139_t1.c1, fdw139_t2.c2, fdw139_t2.c1
   Relations: (mysql_fdw_regress.fdw139_t1) LEFT JOIN (mysql_fdw_regress.fdw139_t2)
   Remote query: SELECT r6.`c1`, r9.`c2`, r9.`c1` FROM (`mysql_fdw_regress`.`test1` r6 LEFT JOIN `mysql_fdw_regress`.`test2` r9 ON (((r6.`c1` = r9.`c1`)))) ORDER BY r6.`c1` IS NULL ASC, r6.`c1` ASC, r9.`c1` IS NULL ASC, r9.`c1` ASC, r9.`c2` IS NULL ASC, r9.`c2` ASC LIMIT 10
(4 rows)

--Testcase 89:
SELECT t1.c1, t2.c2
  FROM v1 t1 LEFT JOIN v2 t2 ON (t1.c1 = t2.c1)
  ORDER BY t1.c1, t2.c1, t2.c2 NULLS LAST LIMIT 10;
 c1 | c2  
----+-----
  1 | 200
  2 | 200
 11 |    
(3 rows)

--Testcase 90:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2
  FROM v1 t1 LEFT JOIN fdw139_t2 t2 ON (t1.c1 = t2.c1)
  ORDER BY t1.c1, t2.c1, t2.c2 NULLS LAST LIMIT 10;  -- not pushed down, view owner not current user
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Limit
   Output: fdw139_t1.c1, t2.c2, t2.c1
   ->  Sort
         Output: fdw139_t1.c1, t2.c2, t2.c1
         Sort Key: fdw139_t1.c1, t2.c1, t2.c2
         ->  Nested Loop Left Join
               Output: fdw139_t1.c1, t2.c2, t2.c1
               Join Filter: (fdw139_t1.c1 = t2.c1)
               ->  Foreign Scan on public.fdw139_t1
                     Output: fdw139_t1.c1, fdw139_t1.c2, fdw139_t1.c3, fdw139_t1.c4
                     Remote query: SELECT `c1` FROM `mysql_fdw_regress`.`test1`
               ->  Materialize
                     Output: t2.c2, t2.c1
                     ->  Foreign Scan on public.fdw139_t2 t2
                           Output: t2.c2, t2.c1
                           Remote query: SELECT `c1`, `c2` FROM `mysql_fdw_regress`.`test2`
(16 rows)

--Testcase 91:
SELECT t1.c1, t2.c2
  FROM v1 t1 LEFT JOIN fdw139_t2 t2 ON (t1.c1 = t2.c1)
  ORDER BY t1.c1, t2.c1, t2.c2 NULLS LAST LIMIT 10;
 c1 | c2  
----+-----
  1 | 200
  2 | 200
 11 |    
(3 rows)

--Testcase 92:
ALTER VIEW v1 OWNER TO CURRENT_USER;
--Testcase 93:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2
  FROM v1 t1 LEFT JOIN fdw139_t2 t2 ON (t1.c1 = t2.c1)
  ORDER BY t1.c1, t2.c1, t2.c2 NULLS LAST LIMIT 10;  -- pushed down
                                                                                                                                    QUERY PLAN                                                                                                                                     
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: fdw139_t1.c1, t2.c2, t2.c1
   Relations: (mysql_fdw_regress.fdw139_t1) LEFT JOIN (mysql_fdw_regress.fdw139_t2 t2)
   Remote query: SELECT r6.`c1`, r2.`c2`, r2.`c1` FROM (`mysql_fdw_regress`.`test1` r6 LEFT JOIN `mysql_fdw_regress`.`test2` r2 ON (((r6.`c1` = r2.`c1`)))) ORDER BY r6.`c1` IS NULL ASC, r6.`c1` ASC, r2.`c1` IS NULL ASC, r2.`c1` ASC, r2.`c2` IS NULL ASC, r2.`c2` ASC LIMIT 10
(4 rows)

--Testcase 94:
SELECT t1.c1, t2.c2
  FROM v1 t1 LEFT JOIN fdw139_t2 t2 ON (t1.c1 = t2.c1)
  ORDER BY t1.c1, t2.c1, t2.c2 NULLS LAST LIMIT 10;
 c1 | c2  
----+-----
  1 | 200
  2 | 200
 11 |    
(3 rows)

--Testcase 95:
ALTER VIEW v1 OWNER TO regress_view_owner;
-- Non-Var items in targetlist of the nullable rel of a join preventing
-- push-down in some cases
-- Unable to push {fdw139_t1, fdw139_t2}
--Testcase 96:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT q.a, fdw139_t2.c1
  FROM (SELECT 13 FROM fdw139_t1 WHERE c1 = 13) q(a) RIGHT JOIN fdw139_t2 ON (q.a = fdw139_t2.c1)
  WHERE fdw139_t2.c1 BETWEEN 10 AND 15;
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Nested Loop Left Join
   Output: (13), fdw139_t2.c1
   Join Filter: (13 = fdw139_t2.c1)
   ->  Foreign Scan on public.fdw139_t2
         Output: fdw139_t2.c1, fdw139_t2.c2, fdw139_t2.c3, fdw139_t2.c4
         Remote query: SELECT `c1` FROM `mysql_fdw_regress`.`test2` WHERE ((`c1` >= 10)) AND ((`c1` <= 15))
   ->  Materialize
         Output: (13)
         ->  Foreign Scan on public.fdw139_t1
               Output: 13
               Remote query: SELECT NULL FROM `mysql_fdw_regress`.`test1` WHERE ((`c1` = 13))
(11 rows)

--Testcase 97:
SELECT q.a, fdw139_t2.c1
  FROM (SELECT 13 FROM fdw139_t1 WHERE c1 = 13) q(a) RIGHT JOIN fdw139_t2 ON (q.a = fdw139_t2.c1)
  WHERE fdw139_t2.c1 BETWEEN 10 AND 15;
 a | c1 
---+----
   | 12
(1 row)

-- Ok to push {fdw139_t1, fdw139_t2 but not {fdw139_t1, fdw139_t2, fdw139_t3}
--Testcase 98:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT fdw139_t3.c1, q.*
  FROM fdw139_t3 LEFT JOIN (
    SELECT 13, fdw139_t1.c1, fdw139_t2.c1
    FROM fdw139_t1 RIGHT JOIN fdw139_t2 ON (fdw139_t1.c1 = fdw139_t2.c1)
    WHERE fdw139_t1.c1 = 11
  ) q(a, b, c) ON (fdw139_t3.c1 = q.b)
  WHERE fdw139_t3.c1 BETWEEN 10 AND 15;
                                                                                   QUERY PLAN                                                                                   
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop Left Join
   Output: fdw139_t3.c1, (13), fdw139_t1.c1, fdw139_t2.c1
   Join Filter: (fdw139_t3.c1 = fdw139_t1.c1)
   ->  Foreign Scan on public.fdw139_t3
         Output: fdw139_t3.c1, fdw139_t3.c2, fdw139_t3.c3
         Remote query: SELECT `c1` FROM `mysql_fdw_regress`.`test3` WHERE ((`c1` >= 10)) AND ((`c1` <= 15))
   ->  Materialize
         Output: fdw139_t1.c1, fdw139_t2.c1, (13)
         ->  Foreign Scan
               Output: fdw139_t1.c1, fdw139_t2.c1, 13
               Relations: (mysql_fdw_regress.fdw139_t1) INNER JOIN (mysql_fdw_regress.fdw139_t2)
               Remote query: SELECT r4.`c1`, r5.`c1` FROM (`mysql_fdw_regress`.`test1` r4 INNER JOIN `mysql_fdw_regress`.`test2` r5 ON (((r5.`c1` = 11)) AND ((r4.`c1` = 11))))
(12 rows)

--Testcase 99:
SELECT fdw139_t3.c1, q.*
  FROM fdw139_t3 LEFT JOIN (
    SELECT 13, fdw139_t1.c1, fdw139_t2.c1
    FROM fdw139_t1 RIGHT JOIN fdw139_t2 ON (fdw139_t1.c1 = fdw139_t2.c1)
    WHERE fdw139_t1.c1 = 11
  ) q(a, b, c) ON (fdw139_t3.c1 = q.b)
  WHERE fdw139_t3.c1 BETWEEN 10 AND 15;
 c1 | a | b | c 
----+---+---+---
 13 |   |   |  
(1 row)

-- Delete existing data and load new data for partition-wise join test cases.
--Testcase 100:
DROP OWNED BY regress_view_owner;
--Testcase 101:
DROP ROLE regress_view_owner;
--Testcase 102:
DELETE FROM fdw139_t1;
--Testcase 103:
DELETE FROM fdw139_t2;
--Testcase 104:
DELETE FROM fdw139_t3;
--Testcase 105:
INSERT INTO fdw139_t1 values(1, 1, 'AAA1', 'foo');
--Testcase 106:
INSERT INTO fdw139_t1 values(2, 2, 'AAA2', 'bar');
--Testcase 107:
INSERT INTO fdw139_t1 values(3, 3, 'AAA11', 'foo');
--Testcase 108:
INSERT INTO fdw139_t1 values(4, 4, 'AAA12', 'foo');
--Testcase 109:
INSERT INTO fdw139_t2 values(5, 5, 'BBB1', 'foo');
--Testcase 110:
INSERT INTO fdw139_t2 values(6, 6, 'BBB2', 'bar');
--Testcase 111:
INSERT INTO fdw139_t2 values(7, 7, 'BBB11', 'foo');
--Testcase 112:
INSERT INTO fdw139_t2 values(8, 8, 'BBB12', 'foo');
--Testcase 113:
INSERT INTO fdw139_t3 values(1, 1, 'CCC1');
--Testcase 114:
INSERT INTO fdw139_t3 values(2, 2, 'CCC2');
--Testcase 115:
INSERT INTO fdw139_t3 values(3, 3, 'CCC13');
--Testcase 116:
INSERT INTO fdw139_t3 values(4, 4, 'CCC14');
--Testcase 117:
DROP FOREIGN TABLE fdw139_t4;
--Testcase 118:
CREATE FOREIGN TABLE tmp_t4(c1 int, c2 int, c3 text)
  SERVER mysql_svr1 OPTIONS(dbname 'mysql_fdw_regress', table_name 'test4');
--Testcase 119:
INSERT INTO tmp_t4 values(5, 5, 'CCC1');
--Testcase 120:
INSERT INTO tmp_t4 values(6, 6, 'CCC2');
--Testcase 121:
INSERT INTO tmp_t4 values(7, 7, 'CCC13');
--Testcase 122:
INSERT INTO tmp_t4 values(8, 8, 'CCC13');
-- Test partition-wise join
--Testcase 123:
SET enable_partitionwise_join TO on;
-- Create the partition table in plpgsql block as those are failing with
-- different error messages on back-branches.
-- All test cases related to partition-wise join gives an error on v96 and v95
-- as partition syntax is not supported there.
DO
$$
BEGIN
--Testcase 124:
  EXECUTE 'CREATE TABLE fprt1 (c1 int, c2 int, c3 varchar, c4 varchar) PARTITION BY RANGE(c1)';
EXCEPTION WHEN others THEN
  RAISE NOTICE 'syntax error';
END;
$$
LANGUAGE plpgsql;
--Testcase 125:
CREATE FOREIGN TABLE ftprt1_p1 PARTITION OF fprt1 FOR VALUES FROM (1) TO (4)
  SERVER mysql_svr OPTIONS (dbname 'mysql_fdw_regress', table_name 'test1');
--Testcase 126:
CREATE FOREIGN TABLE ftprt1_p2 PARTITION OF fprt1 FOR VALUES FROM (5) TO (8)
  SERVER mysql_svr OPTIONS (dbname 'mysql_fdw_regress', TABLE_NAME 'test2');
DO
$$
BEGIN
--Testcase 127:
  EXECUTE 'CREATE TABLE fprt2 (c1 int, c2 int, c3 varchar) PARTITION BY RANGE(c2)';
EXCEPTION WHEN syntax_error THEN
  RAISE NOTICE 'syntax error';
END;
$$
LANGUAGE plpgsql;
--Testcase 128:
CREATE FOREIGN TABLE ftprt2_p1 PARTITION OF fprt2 FOR VALUES FROM (1) TO (4)
  SERVER mysql_svr OPTIONS (dbname 'mysql_fdw_regress', table_name 'test3');
--Testcase 129:
CREATE FOREIGN TABLE ftprt2_p2 PARTITION OF fprt2 FOR VALUES FROM (5) TO (8)
  SERVER mysql_svr OPTIONS (dbname 'mysql_fdw_regress', TABLE_NAME 'test4');
-- Inner join three tables
-- Different explain plan on v10 as partition-wise join is not supported there.
--Testcase 130:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1,t2.c2,t3.c3
  FROM fprt1 t1 INNER JOIN fprt2 t2 ON (t1.c1 = t2.c2) INNER JOIN fprt1 t3 ON (t2.c2 = t3.c1)
  WHERE t1.c1 % 2 =0 ORDER BY 1,2,3;
                                                                                                                                                                     QUERY PLAN                                                                                                                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Merge Append
   Sort Key: t1.c1, t3.c3
   ->  Foreign Scan
         Output: t1.c1, t2.c2, t3.c3
         Relations: ((mysql_fdw_regress.ftprt1_p1 t1) INNER JOIN (mysql_fdw_regress.ftprt2_p1 t2)) INNER JOIN (mysql_fdw_regress.ftprt1_p1 t3)
         Remote query: SELECT r6.`c1`, r8.`c2`, r10.`c3` FROM ((`mysql_fdw_regress`.`test1` r6 INNER JOIN `mysql_fdw_regress`.`test3` r8 ON (((r6.`c1` = r8.`c2`)) AND (((r6.`c1` % 2) = 0)))) INNER JOIN `mysql_fdw_regress`.`test1` r10 ON (((r6.`c1` = r10.`c1`)))) ORDER BY r6.`c1` IS NULL ASC, r6.`c1` ASC, r10.`c3` IS NULL ASC, r10.`c3` ASC
   ->  Foreign Scan
         Output: t1_1.c1, t2_1.c2, t3_1.c3
         Relations: ((mysql_fdw_regress.ftprt1_p2 t1) INNER JOIN (mysql_fdw_regress.ftprt2_p2 t2)) INNER JOIN (mysql_fdw_regress.ftprt1_p2 t3)
         Remote query: SELECT r7.`c1`, r9.`c2`, r11.`c3` FROM ((`mysql_fdw_regress`.`test2` r7 INNER JOIN `mysql_fdw_regress`.`test4` r9 ON (((r7.`c1` = r9.`c2`)) AND (((r7.`c1` % 2) = 0)))) INNER JOIN `mysql_fdw_regress`.`test2` r11 ON (((r7.`c1` = r11.`c1`)))) ORDER BY r7.`c1` IS NULL ASC, r7.`c1` ASC, r11.`c3` IS NULL ASC, r11.`c3` ASC
(10 rows)

--Testcase 131:
SELECT t1.c1,t2.c2,t3.c3
  FROM fprt1 t1 INNER JOIN fprt2 t2 ON (t1.c1 = t2.c2) INNER JOIN fprt1 t3 ON (t2.c2 = t3.c1)
  WHERE t1.c1 % 2 =0 ORDER BY 1,2,3;
 c1 | c2 |  c3   
----+----+-------
  2 |  2 | AAA2
  4 |  4 | AAA12
  6 |  6 | BBB2
  8 |  8 | BBB12
(4 rows)

-- With whole-row reference; partitionwise join does not apply
-- Table alias in foreign scan is different for v12, v11 and v10.
--Testcase 132:
EXPLAIN (VERBOSE, COSTS false)
SELECT t1, t2, t1.c1
  FROM fprt1 t1 JOIN fprt2 t2 ON (t1.c1 = t2.c2)
  ORDER BY t1.c3, t1.c1;
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop
   Output: ((t1.*)::fprt1), ((t2.*)::fprt2), t1.c1, t1.c3
   Join Filter: (t1.c1 = t2.c2)
   ->  Merge Append
         Sort Key: t1.c3, t1.c1
         ->  Foreign Scan on public.ftprt1_p1 t1
               Output: t1.*, t1.c1, t1.c3
               Remote query: SELECT `c1`, `c2`, `c3`, `c4` FROM `mysql_fdw_regress`.`test1` ORDER BY `c3` IS NULL ASC, `c3` ASC, `c1` IS NULL ASC, `c1` ASC
         ->  Foreign Scan on public.ftprt1_p2 t1_1
               Output: t1_1.*, t1_1.c1, t1_1.c3
               Remote query: SELECT `c1`, `c2`, `c3`, `c4` FROM `mysql_fdw_regress`.`test2` ORDER BY `c3` IS NULL ASC, `c3` ASC, `c1` IS NULL ASC, `c1` ASC
   ->  Materialize
         Output: ((t2.*)::fprt2), t2.c2
         ->  Append
               ->  Foreign Scan on public.ftprt2_p1 t2
                     Output: t2.*, t2.c2
                     Remote query: SELECT `c1`, `c2`, `c3` FROM `mysql_fdw_regress`.`test3`
               ->  Foreign Scan on public.ftprt2_p2 t2_1
                     Output: t2_1.*, t2_1.c2
                     Remote query: SELECT `c1`, `c2`, `c3` FROM `mysql_fdw_regress`.`test4`
(20 rows)

--Testcase 133:
SELECT t1, t2, t1.c1
  FROM fprt1 t1 JOIN fprt2 t2 ON (t1.c1 = t2.c2)
  ORDER BY t1.c3, t1.c1;
       t1        |     t2      | c1 
-----------------+-------------+----
 (1,1,AAA1,foo)  | (1,1,CCC1)  |  1
 (3,3,AAA11,foo) | (3,3,CCC13) |  3
 (4,4,AAA12,foo) | (4,4,CCC14) |  4
 (2,2,AAA2,bar)  | (2,2,CCC2)  |  2
 (5,5,BBB1,foo)  | (5,5,CCC1)  |  5
 (7,7,BBB11,foo) | (7,7,CCC13) |  7
 (8,8,BBB12,foo) | (8,8,CCC13) |  8
 (6,6,BBB2,bar)  | (6,6,CCC2)  |  6
(8 rows)

-- Join with lateral reference
-- Different explain plan on v10 as partition-wise join is not supported there.
--Testcase 134:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1,t1.c2
  FROM fprt1 t1, LATERAL (SELECT t2.c1, t2.c2 FROM fprt2 t2
  WHERE t1.c1 = t2.c2 AND t1.c2 = t2.c1) q WHERE t1.c1 % 2 = 0 ORDER BY 1,2;
                                                                                                                                        QUERY PLAN                                                                                                                                        
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Merge Append
   Sort Key: t1.c1, t1.c2
   ->  Foreign Scan
         Output: t1.c1, t1.c2
         Relations: (mysql_fdw_regress.ftprt1_p1 t1) INNER JOIN (mysql_fdw_regress.ftprt2_p1 t2)
         Remote query: SELECT r4.`c1`, r4.`c2` FROM (`mysql_fdw_regress`.`test1` r4 INNER JOIN `mysql_fdw_regress`.`test3` r6 ON (((r4.`c1` = r6.`c2`)) AND ((r4.`c2` = r6.`c1`)) AND (((r4.`c1` % 2) = 0)))) ORDER BY r4.`c1` IS NULL ASC, r4.`c1` ASC, r4.`c2` IS NULL ASC, r4.`c2` ASC
   ->  Foreign Scan
         Output: t1_1.c1, t1_1.c2
         Relations: (mysql_fdw_regress.ftprt1_p2 t1) INNER JOIN (mysql_fdw_regress.ftprt2_p2 t2)
         Remote query: SELECT r5.`c1`, r5.`c2` FROM (`mysql_fdw_regress`.`test2` r5 INNER JOIN `mysql_fdw_regress`.`test4` r7 ON (((r5.`c1` = r7.`c2`)) AND ((r5.`c2` = r7.`c1`)) AND (((r5.`c1` % 2) = 0)))) ORDER BY r5.`c1` IS NULL ASC, r5.`c1` ASC, r5.`c2` IS NULL ASC, r5.`c2` ASC
(10 rows)

--Testcase 135:
SELECT t1.c1,t1.c2
  FROM fprt1 t1, LATERAL (SELECT t2.c1, t2.c2 FROM fprt2 t2
  WHERE t1.c1 = t2.c2 AND t1.c2 = t2.c1) q WHERE t1.c1 % 2 = 0 ORDER BY 1,2;
 c1 | c2 
----+----
  2 |  2
  4 |  4
  6 |  6
  8 |  8
(4 rows)

-- With PHVs, partitionwise join selected but no join pushdown
-- Table alias in foreign scan is different for v12, v11 and v10.
--Testcase 136:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t1.phv, t2.c2, t2.phv
  FROM (SELECT 't1_phv' phv, * FROM fprt1 WHERE c1 % 2 = 0) t1 LEFT JOIN
    (SELECT 't2_phv' phv, * FROM fprt2 WHERE c2 % 2 = 0) t2 ON (t1.c1 = t2.c2)
  ORDER BY t1.c1, t2.c2;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Sort
   Output: ftprt1_p1.c1, 't1_phv'::text, ftprt2_p1.c2, ('t2_phv'::text)
   Sort Key: ftprt1_p1.c1, ftprt2_p1.c2
   ->  Append
         ->  Nested Loop Left Join
               Output: ftprt1_p1.c1, 't1_phv'::text, ftprt2_p1.c2, ('t2_phv'::text)
               Join Filter: (ftprt1_p1.c1 = ftprt2_p1.c2)
               ->  Foreign Scan on public.ftprt1_p1
                     Output: ftprt1_p1.c1
                     Remote query: SELECT `c1` FROM `mysql_fdw_regress`.`test1` WHERE (((`c1` % 2) = 0))
               ->  Materialize
                     Output: ftprt2_p1.c2, ('t2_phv'::text)
                     ->  Foreign Scan on public.ftprt2_p1
                           Output: ftprt2_p1.c2, 't2_phv'::text
                           Remote query: SELECT `c2` FROM `mysql_fdw_regress`.`test3` WHERE (((`c2` % 2) = 0))
         ->  Nested Loop Left Join
               Output: ftprt1_p2.c1, 't1_phv'::text, ftprt2_p2.c2, ('t2_phv'::text)
               Join Filter: (ftprt1_p2.c1 = ftprt2_p2.c2)
               ->  Foreign Scan on public.ftprt1_p2
                     Output: ftprt1_p2.c1
                     Remote query: SELECT `c1` FROM `mysql_fdw_regress`.`test2` WHERE (((`c1` % 2) = 0))
               ->  Materialize
                     Output: ftprt2_p2.c2, ('t2_phv'::text)
                     ->  Foreign Scan on public.ftprt2_p2
                           Output: ftprt2_p2.c2, 't2_phv'::text
                           Remote query: SELECT `c2` FROM `mysql_fdw_regress`.`test4` WHERE (((`c2` % 2) = 0))
(26 rows)

--Testcase 137:
SELECT t1.c1, t1.phv, t2.c2, t2.phv
  FROM (SELECT 't1_phv' phv, * FROM fprt1 WHERE c1 % 2 = 0) t1 LEFT JOIN
    (SELECT 't2_phv' phv, * FROM fprt2 WHERE c2 % 2 = 0) t2 ON (t1.c1 = t2.c2)
  ORDER BY t1.c1, t2.c2;
 c1 |  phv   | c2 |  phv   
----+--------+----+--------
  2 | t1_phv |  2 | t2_phv
  4 | t1_phv |  4 | t2_phv
  6 | t1_phv |  6 | t2_phv
  8 | t1_phv |  8 | t2_phv
(4 rows)

--Testcase 138:
SET enable_partitionwise_join TO off;
-- Cleanup
--Testcase 139:
DELETE FROM fdw139_t1;
--Testcase 140:
DELETE FROM fdw139_t2;
--Testcase 141:
DELETE FROM fdw139_t3;
--Testcase 142:
DELETE FROM tmp_t4;
--Testcase 143:
DROP FOREIGN TABLE fdw139_t1;
--Testcase 144:
DROP FOREIGN TABLE fdw139_t2;
--Testcase 145:
DROP FOREIGN TABLE fdw139_t3;
--Testcase 146:
DROP FOREIGN TABLE tmp_t4;
--Testcase 147:
DROP TABLE IF EXISTS fprt1;
--Testcase 148:
DROP TABLE IF EXISTS fprt2;
DROP TYPE user_enum;
--Testcase 149:
DROP USER MAPPING FOR public SERVER mysql_svr;
--Testcase 150:
DROP USER MAPPING FOR public SERVER mysql_svr1;
--Testcase 151:
DROP SERVER mysql_svr;
--Testcase 152:
DROP SERVER mysql_svr1;
--Testcase 153:
DROP EXTENSION mysql_fdw;
